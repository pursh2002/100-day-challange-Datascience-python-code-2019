1. Read train.csv into a DataFrame named titanic. Keep only the following columns:
"Survived"
"Pclass"
"Sex"
"Age"
"SibSp"
"Parch"
"Fare"
"Embarked"
Use the DataFrame.dropna() method to remove rows containing missing values.

import pandas as pd

titanic = pd.read_csv('train.csv')
titanic = titanic.drop(['Name','Ticket','PassengerId','Cabin'],axis = 1)
titanic = titanic.dropna()

2. To get familiar with seaborn, we'll start by creating the familiar histogram. We can generate a 
histogram of the Fare column using the seaborn.distplot() function:

import seaborn as sns 
import matplotlib.pyplot as plt 
sns.distplot(titanic["Age"])
plt.show()

import seaborn as sns    
import matplotlib.pyplot as plt
sns.distplot(titanic["Fare"])
plt.show()

3. kernel density plot, we use the seaborn.kdeplot()
sns.kdeplot(titanic["Age"])

Generate a kernel density plot:
Using the values in the "Age" column
With the area under the curve shaded
Set the x-axis label to "Age" using pyplot.xlabel().

import seaborn as sns 
import matplotlib.pyplot as plt 
sns.kdeplot(titanic["Age"],shade = True)
plt.xlabel("Age")

4. sns.set_style("darkgrid")
Set the style to the style sheet that hides the coordinate grid and sets the background color to white.
Generate a kernel density plot of the "Age" column, with the area under the curve shaded.
Set the x-axis label to "Age".
Despine all of the axes.
To remove the axis spines for the top and right axes, we use the seaborn.despine() function:
By default, only the top and right axes will be despined, or have their spines removed. 
To despine the other two axes, we need to set the left and bottom parameters to True.
sns.set_style("white")
sns.kdeplot(titanic["Age"], shade = True)
plt.xlabel("Age")
sns.despine(left = True , bottom = True)

5. In seaborn, we can create a small multiple by specifying the conditioning criteria and the type of data visualization 
we want. For example, we can visualize the differences in age distributions between passengers who survived and those who 
didn't by creating a pair of kernel density plots. One kernel density plot would visualize the distribution of values in the 
"Age" column where Survived equalled 0 and the other would visualize the distribution of values in the "Age" column where 
Survived equalled 1.FacetGrid is another word for "subset".
g = sns.FacetGrid(titanic,col = "Survived", size= 6)
g.map(sns.kdeplot,"Age",shade = True)
For example, we can map matplotlib histograms to the grid:
g.map(plt.hist,"Age")

Use a FacetGrid instance to generate three plots on the same row:
One for each unique value of Pclass.
Each plot should be a kernel density plot of the "Age" column, with the area under the curve shaded.
Each plot should have a height of 6 inches.
Remove all of the spines using seaborn.despine().
Display the plots.
g = sns.FacetGrid(titanic, col = 'Pclass', size = 6)
g.map(sns.kdeplot,"Age",shade = True)
sns.despine(left = True, bottom = True)
plt.show()

6. We can use two conditions to generate a grid of plots, each containing a subset of the data with a unique combination of
each condition. When creating a FacetGrid, we use the row parameter to specify the column in the dataframe we want used to 
subset across the rows in the grid. 
g = sns.FacetGrid(titanic, col="Survived", row="Sex")
g.map(sns.kdeplot, "Age", shade=True)
sns.despine(left=True, bottom=True)
plt.show()

7. When subsetting data using two conditions, the rows in the grid represented one condition while the columns represented 
another. We can express a third condition by generating multiple plots on the same subplot in the grid and color 
them differently. Thankfully, we can add a condition just by setting the hue parameter to the column name from the dataframe.
Use a FacetGrid instance to generate a grid of plots using the following conditions:
The Survived column across the columns in the grid.
The Pclass column across the rows in the grid.
The Sex column using different hues.
Each plot should be a kernel density plot of the "Age" column, with the area under the curve shaded.
Each plot should have a height of 3 inches.
Remove all of the spines using seaborn.despine().
Display the plots.

g = sns.FacetGrid(titanic, col="Survived", row="Pclass", hue ="Sex",size = 3)
g.map(sns.kdeplot, "Age", shade=True)
sns.despine(left=True, bottom=True)
plt.show()

8. Now that we're coloring plots, we need a legend to keep track of which value each color represents. As a challenge to you,
we won't specify how exactly to generate a legend in seaborn. Instead, we encourage you to use the examples from the page on 
plotting using the FacetGrid instance.
Use a FacetGrid instance to generate a grid of plots using the following conditions:
The Survived column across the columns in the grid.
The Pclass column across the rows in the grid.
The Sex column using different hues.
Each plot should be a kernel density plot of the "Age" column, with the area under the curve shaded.
Each plot should have a height of 3 inches.
Remove all of the spines using seaborn.despine().
Add a legend for the hues representing the values in the Sex column.
Display the plots.

g = sns.FacetGrid(titanic, col = "Survived", row ="Pclass", hue="Sex", size = 3)
g.map(sns.kdeplot,"Age", shade = True)
g.add_legend()
sns.despine(left = True, bottom = True)
plt.show()


