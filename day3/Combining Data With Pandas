analyze the 2015, 2016, and 2017 World Happiness Reports.
answer the following question:
Did world happiness increase, decrease, or stay about the same from 2015 to 2017?
each country a happiness score based on a poll question that asks respondents to rank their life on a scale of 0 - 10, 
so "world happiness" refers to this definition specifically.

1. We've already read the World_Happiness_2015.csv file into a dataframe called happiness2015.
Use the pandas.read_csv() function to read the World_Happiness_2016.csv file into a dataframe 
called happiness2016 and the World_Happiness_2017.csv file into a dataframe called happiness2017.
Add a column called Year to each dataframe with the corresponding year. For example, the Year column 
in happiness2015 should contain the value 2015 for each row.
https://www.geeksforgeeks.org/adding-new-column-to-existing-dataframe-in-pandas/
https://www.geeksforgeeks.org/python-pandas-dataframe-assign/

import pandas as pd
happiness2015 = pd.read_csv("World_Happiness_2015.csv")
happiness2016 = pd.read_csv("World_Happiness_2016.csv")
happiness2017 = pd.read_csv("World_Happiness_2017.csv")
happiness2015['Year'] = 2015
happiness2016['Year'] = 2016
happiness2017['Year'] = 2017


2. pd.concat()
Let's start by exploring the pd.concat() function. The concat() function combines dataframes one of two ways:
                            side by side axis = 1 == df1 df2 df3 

stacked axis = o  
df1 
df2
df3

pd.concat([df1,df2])

Below are the subsets we'll be working with:
head_2015 = happiness2015[['Country','Happiness Score', 'Year']].head(3)
head_2016 = happiness2016[['Country', 'Happiness Score','Year']].head(3)

We've already saved the subsets from happiness2015 and happiness2016 to the variables head_2015 and head_2016.
Use the pd.concat() function to combine head_2015 and head_2016 along axis = 0. Remember to pass the head_2015 and head_2016 into the function as a list. Assign the result to concat_axis0.
Use the pd.concat() function to combine head_2015 and head_2016 along axis = 1. Remember to pass head_2015 and head_2016 into the function as a list and set the axis parameter equal to 1. Assign the result to concat_axis1.
Use the variable inspector to view concat_axis0 and concat_axis1.
Assign the number of rows in concat_axis0 to a variable called question1.
Assign the number of rows in concat_axis1 to a variable called question2.

head_2015 = happiness2015[['Country','Happiness Score', 'Year']].head(3)
head_2016 = happiness2016[['Country','Happiness Score', 'Year']].head(3)
concat_axis0 = pd.concat([head_2015,head_2016],axis = 0)

concat_axis1 =pd.concat([head_2015,head_2016],axis = 1)

question1 = concat_axis0.shape[0]

question2 = concat_axis1.shape[0]

https://i.stack.imgur.com/3FXuI.png -- DataFrame.count(self, axis=0, level=None, numeric_only=False)[source]
total_rows=len(df.axes[0])
total_cols=len(df.axes[1])
row counts len(df),df.shape[0],len(df.index)
column counts len(def.columns), df.shape[1]
group count- df.count, df.sixe

3. We've already created the head_2015 and head_2016 variables.
Use the pd.concat() function to combine head_2015 and head_2016 along axis = 0. Remember to pass the head_2015 and head_2016 into the function as a list. Assign the result to concat_axis0.
Use the variable inspector to view concat_axis0.
Assign the number of rows in concat_axis0 to a variable called rows.
Assign the number of columns in concat_axis0 to a variable called columns.


head_2015 = happiness2015[['Year','Country','Happiness Score', 'Standard Error']].head(4)
head_2016 = happiness2016[['Country','Happiness Score', 'Year']].head(3)

concat_axis0 = pd.concat([head_2015,head_2016], axis = 0)
rows = len(concat_axis0.axes[0])
columns = len(concat_axis0.axes[1])
	Country	Happiness Score	Standard Error	Year
0	Switzerland	7.587	0.03411	2015
1	Iceland	7.561	0.04884	2015
2	Denmark	7.527	0.03328	2015
3	Norway	7.522	0.03880	2015
0	Denmark	7.526	NaN	2016
1	Switzerland	7.509	NaN	2016
2	Iceland	7.501	NaN	2016

Note that because the Standard Error column didn't exist in head_2016, NaN values
were created to signify those values are missing.
ignore_index.....
Luckily, the concat function has a parameter, ignore_index, that can be used to clear the existing
index and reset it in the result.
head_2015 = happiness2015[['Year','Country','Happiness Score', 'Standard Error']].head(4)
head_2016 = happiness2016[['Country','Happiness Score', 'Year']].head(3)
concat_update_index = pd.concat([head_2015,head_2016],axis = 0 , ignore_index = True)

5. pd.merge() function ---a function that can execute high performance database-style joins
the merge function only combines dataframes horizontally (axis=1) and can only combine two dataframes at a time. 
valuable when we need to combine very large dataframes quickly
With the merge() function, we'll combine dataframes on a key, a shared index or column.
pd.merge(left = df1, right = df2, on 'Col_Name')

We've already saved three rows from happiness2015 and happiness2016 to variables named three_2015 and three_2016.
Use the pd.merge() function to join three_2015 and three_2016 on the Country column. Assign the result to merged.
three_2015 = happiness2015[['Country','Happiness Rank','Year']].iloc[2:5]
three_2016 = happiness2016[['Country','Happiness Rank','Year']].iloc[2:5]
merged = pd.merge(left=three_2015, right = three_2016, on = "Country" )

Joining three_2015 and three_2016 in the last exercise resulted in a dataframe with just one row:
Country	Happiness Rank_x	Year_x	Happiness Rank_y	Year_y
0	Norway	4	2015	4	2016
Let's look back to three_2015 and three_2016 to understand why. Since we joined the dataframes on the Country column,
or used it as the key, the merge() function looked to match elements in the Country column in BOTH dataframes.
his way of combining, or joining, data is called an inner join. An inner join returns only the intersection of the keys, 
or the elements that appear in both dataframes with a common key.

There are actually four different types of joins:

Inner: only includes elements that appear in both dataframes with a common key
Outer: includes all data from both dataframes
Left: includes all of the rows from the "left" dataframe along with any rows from the "right" dataframe with a common key; 
the result retains all columns from both of the original dataframes
Right: includes all of the rows from the "right" dataframe along with any rows from the "left" dataframe with a common key; 
the result retains all columns from both of the original dataframes

Update merged to use a left join instead of an inner join. Set the how parameter to 'left' in merge(). Assign the result to merged_left.
Update merged_left so that the left parameter equals three_2016 and the right parameter equals three_2015. Assign the result to merged_left_updated.
Based on the results of this exercise, when using a left join, does changing the dataframe assigned to the left and right parameters change the result? 
Try to answer this question before moving onto the next screen.
three_2015 = happiness2015[['Country','Happiness Rank','Year']].iloc[2:5]
three_2016 = happiness2016[['Country','Happiness Rank','Year']].iloc[2:5]
merged = pd.merge(left=three_2015, right=three_2016, on='Country')
merged_left = pd.merge(left=three_2015, right=three_2016, on='Country', how = 'left')
merged_left_updated = pd.merge(right=three_2015,left = three_2016, on='Country', how = 'left')

7. Let's summarize what we learned in the last exercise:

Changing the join type from an inner join to a left join resulted in a dataframe with more rows and created NaNs.
When using a left join, interchanging the dataframes assigned to the left and right parameters changes the results.

In summary, we'd use a left join when we don't want to drop any data from the left dataframe.

Note that a right join works the same as a left join, except it includes all of the rows from the "right" dataframe. 
its common to use left join 
Update merged to use the suffixes _2015 and _2016. Set the suffixes parameter to ('_2015', '_2016') in merge(). Assign the result to merged_suffixes.
Update merged_updated to use the suffixes _2015 and _2016. Notice that the "left" dataframe is three_2016 and the "right" dataframe is three_2015. Assign the result to merged_updated_suffixes.

three_2015 = happiness2015[['Country','Happiness Rank','Year']].iloc[2:5]
three_2016 = happiness2016[['Country','Happiness Rank','Year']].iloc[2:5]
merged = pd.merge(left=three_2015, right=three_2016, how='left', on='Country')
merged_updated = pd.merge(left=three_2016, right=three_2015, how = 'left', on='Country')
merged_suffixes = pd.merge(left = three_2015,right=three_2016,how='left',on='Country', suffixes = ('_2015', '_2016'))
merged_updated_suffixes = pd.merge(left=three_2016, right=three_2015, how = 'left', on='Country'suffixes = ('_2015', '_2016'))
three_2015 = happiness2015[['Country','Happiness Rank','Year']].iloc[2:5]
three_2016 = happiness2016[['Country','Happiness Rank','Year']].iloc[2:5]
merged = pd.merge(left=three_2015, right=three_2016, how='left', on='Country')
merged_updated = pd.merge(left=three_2016, right=three_2015, how = 'left', on='Country')
merged_suffixes = pd.merge(left = three_2015,right=three_2016,how='left',on='Country', suffixes = ('_2015', '_2016'))
merged_updated_suffixes = pd.merge(left=three_2016, right=three_2015, how = 'left', on='Country',suffixes =('_2016','_2015'))

8. another way to join dataframes - on the index.
https://s3.amazonaws.com/dq-content/344/Index.svg
In this screen, we'll work with the following two subsets of happiness2015 and happiness2016:
four_2015 = happiness2015[['Country','Happiness Rank','Year']].iloc[2:6]
three_2016 = happiness2016[['Country','Happiness Rank','Year']].iloc[2:5]
We'll join happiness2015 and happiness2016 on index using an inner join, so that the
result contains only the elements in the key that appear in BOTH dataframes
pd.merge(left=four_2015, right=three_2016, left_index=True, right_index=True, suffixes=('_2015','_2016'))
We've already saved four_2015 and three_2016. In this exercise, we'll use a left join to combine four_2015 and three_2016.
Predict the number of rows and columns the resulting dataframe will have. Assign the number of rows to a variable called rows and the number of columns to a variable called columns.
To change the join type used in merge_index to a left join, set the how parameter equal to 'left'. Save the result to merge_index_left.
Update rows and columns so that each contains the correct number of rows and columns in merge_index_left.

import pandas as pd
four_2015 = happiness2015[['Country','Happiness Rank','Year']].iloc[2:6]
three_2016 = happiness2016[['Country','Happiness Rank','Year']].iloc[2:5]
merge_index = pd.merge(left = four_2015,right = three_2016, left_index = True, right_index = True, suffixes = ('_2015','_2016'))
rows = 4
columns =6
merge_index_left = pd.merge(left = four_2015,right = three_2016,left_index = True,right_index = True, suffixes = ('_2015','_2016'), how = 'left')

9. summaries

                                                  pd.concat()	pd.merge()
Default Join Type	                           Outer	Inner
Can Combine More Than Two Dataframes at a Time?	       Yes	No
Can Combine Dataframes Vertically
(axis=0) or Horizontally (axis=1)?
                                                     Both	Horizontally

Syntax	                                    Concat (Vertically)
                                          concat([df1,df2,df3])

                                          Concat (Horizontally)
                                 concat([df1,df2,df3], axis = 1)



                                                                       Merge (Join on Columns)
                                                                      merge(left = df1, right = df2, how = 'join_type', on = 'Col')

                                                                      Merge (Join on Index)
                                                                    merge(left = df1, right = df2, how = 'join_type', left_index = True, right_index = True)


9. 
You may still be wondering about when to use each of the functions and methods we've learned. 
This table can help you understand the limitations of each, but that decision will mostly depend on the problem you're trying to solve.

Let's review our original question next:

Did world happiness increase, decrease, or stay about the same from 2015 to 2017?

To answer this question, we'll create a bar plot in which each bar represented the mean happiness score for one of the years. 
We completed a similar task in the last mission when we calculated the mean happiness score for each region using the df.pivot_table() method:
#Use a pivot table to aggregate the data according to Region.
means = happiness2015.pivot_table('Happiness Score', 'Region', aggfunc=np.mean)

#Use the `df.plot()` method to plot the results.
means.plot(kind='barh', title='Mean Happiness Scores by Region', xlim=(0,10))
Let's repeat the same steps, but this time, we'll group the data by the Year column. First, let's rename the Happiness.
Score column so it matches the colum name in happiness2015 and happiness2016:
happiness2017.rename(columns={'Happiness.Score': 'Happiness Score'}, inplace=True)
Next, we need to combine happiness2015, happiness2016, and happiness2017, 
so that we can group the result by the Year column.

We've already created a Year column in happiness2017 and renamed the Happiness.Score column to Happiness Score.
Use either the pd.concat() function or the pd.merge() function to combine happiness2015, happiness2016, and happiness2017. Assign the result to combined.
Think about whether you need to combine the data horizontally or vertically in order to create a dataframe that can be grouped by year, and decide which function (pd.concat() or pd.merge()) you can use to combine the data.
Use the df.pivot_table() method to create a pivot table from the combined dataframe. Set Year as the index and Happiness Score as the values. Assign the result to pivot_table_combined.
Use the df.plot() method to create a bar chart of the results. Set the kind parameter to barh, the title to 'Mean Happiness Scores by Year', and the xlim parameter to (0,10).
Try to answer the following question based on the results of this exercise: Did world happiness increase, decrease, or stay about the same from 2015 to 2017?

happiness2017.rename(columns={'Happiness.Score': 'Happiness Score'}, inplace=True)
combined = pd.concat([happiness2015,happiness2016,happiness2017],axis = 0)
pivot_table_combined = combined.pivot_table(index = 'Year',values = 'Happiness Score')
pivot_table_combined.plot(kind='barh', title = 'Mean Happiness Scores by Year', xlim = (0,10))

In this mission, we learned how to combine data using the pd.concat() and pd.merge() functions. 
In your travels with pandas, you may happen upon the df.append() and df.join() methods, which are basically shortcuts 
for the concat() and merge() functions. We didn't cover them in this mission, as the differences are few, but if you
want to learn more about 
them, check out this documentation.

https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html
