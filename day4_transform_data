1. You may recall from previous missions that each of the columns below contains the estimated extent to 
which each factor contributes to the happiness score:

Economy (GDP per Capita)
Family
Health (Life Expectancy)
Freedom
Trust (Government Corruption)
Generosity
Throughout this mission, we'll refer to the columns above as the "factor" columns. We'll work to answer the 
following question 
in this mission:

Which of the factors above contribute the most to the happiness score?

However, in order to answer this question, we need to manipulate our data into a format that makes it easier to analyze. 
We'll explore the following functions and methods to perform this task:

Series.map()
Series.apply()
DataFrame.applymap()
DataFrame.apply()
pd.melt()

Recall that the 2015 World Happiness Report is saved to a variable named happiness2015. We also created a dictionary
named mapping for renaming columns.
Use the DataFrame.rename() method to change the 'Economy (GDP per Capita)', 'Health (Life Expectancy)', and 
'Trust (Government Corruption)' column names to the names specified in the mapping dictionary.
Pass the mapping dictionary into the df.rename() method and set the axis parameter to 1.
Assign the result back to happiness2015.


mapping = {'Economy (GDP per Capita)': 'Economy', 'Health (Life Expectancy)': 'Health', 'Trust (Government Corruption)': 
'Trust' }

happiness2015 = happiness2015.rename(mapping,axis =1)
2. 
When we reviewed happiness2015 in the last screen, you may have noticed that each of the "factor" columns consists of 
numbers:
Recall that each number represents the extent to which each factor contributes to the happiness score.

However, not only is this definition a little hard to understand, but it can also be challenging to analyze 
all of these numbers across multiple columns. Instead, we can first convert these numbers to categories that indicate 
whether the factor has a high impact on the happiness score or a low impact using the following function:

def label(element):
    if element > 1:
        return 'High'
    else:
        return 'Low'
        
        
Although pandas provides many built-in functions for common data cleaning tasks, in this case, the tranformation we need to 
perform is so specific to our data that one doesn't exist. Luckily, pandas has a couple methods that can be used to apply a 
custom function like the one above to our data, starting with the following two methods:

Series.map() method
Series.apply() method
Both methods above apply a function element-wise to a column. When we say element-wise, 
we mean that we pass the function one value in the series at a time and it performs some kind of transformation.

We use the following syntax for both methods:
series.map(Function_name)
series.apply(Function_name)
Note that these methods both take a function as a parameter. Because we're using the function as a parameter, 
we pass it into the function without the parentheses. For example, 
if we were working with a function called transform, we'd pass it into the apply() method as follows:
def trasnform(val)
  return val
series.apply(transform)

Use the Series.map() method to apply the label function to the Economy column in happiness2015. Assign the result to 
economy_impact_map.
Use the Series.apply() method to apply the function to the Economy column. Assign the result to economy_impact_apply.
Use the following code to check if the methods produce the same result: economy_impact_map.equals(economy_impact_apply). 
Assign the result to a variable named equal.

def label(element):
    if element > 1:
        return 'High'
    else:
        return 'Low'
    
    
economy_impact_map = happiness2015['Economy'].map(label)

economy_impact_apply = happiness2015['Economy'].apply(label)
equal = economy_impact_map.equals(economy_impact_apply)

3. 
In the last exercise, we applied a function to the Economy column using the Series.map() and Series.apply() 
methods and confirmed that both methods produce the same results.

Note that these methods don't modify the original series. If we want to work with the new series in the original dataframe, 
we must either assign the results back to the original column or 
create a new column. We recommend creating a new column, in case you need to reference the original values. 
Let's do that next:
def label(element)
    if element > 1:
        return High
    else:
        return low
happiness2015['Economy Impact'] = Happiness2015['Economy'].map(label)


To create the Economy Impact column, map() and apply() iterate through the Economy column and pass each value into the label
function. 
The function evaluates which range the value belongs to and assigns the corresponding value to the element in the new column.

Update label to take in another argument named x. If the element is greater than x, return 'High'. Otherwise, return 'Low'.
Then, use the apply method to apply label to the Economy column and set the x argument to 0.8. Save the result back to 
economy_impact_apply.
Since both map and apply can apply functions element-wise to a series, you may be wondering about the difference between them. 
Let's start by looking at a function with arguments.

In the label function, we arbitrarily split the values into 'High' and 'Low'. What if instead we allowed that number to be 
passed into the function as an argument?

def label(element, x):
    if element > x:
        return 'High'
    else:
        return 'Low'
economy_map = happiness2015['Economy'].map(label, x = .8)
When we try to apply the function to the Economy column with the map method, we get an error:

TypeError: map() got an unexpected keyword argument 'x'

def label(element):
    if element > 1:
        return 'High'
    else:
        return 'Low'
economy_impact_apply = happiness2015['Economy'].apply(label)

def label(element, x):
    if element > x:
        return 'High'
    else:
        return 'Low'
economy_impact_apply = happiness2015['Economy'].apply(label, x= .8)

4. 
We learned in the last screen that we can only use the Series.apply() 
method to apply a function with additional arguments element-wise - the Series.map() method will return an error.

So far, we've transformed just one column at a time. If we wanted to transform more than one column, 
we could use the Series.map() or Series.apply() method to transform them as follows:
def label(element)
    if elment > 1:
        return High
    else:
        return low
happiness2015["Economy Impact"] = Happiness2015['Economy'].apply(label)
happiness2015["Health Impact"] = Happiness2015["Health"].apply(label)
happiness2015["Family Impact"] = Happiness2015["Family"].apply(label)

However, it would be easier to just apply the same function to all of the 
factor columns (Economy, Health, Family, Freedom, Generosity, Trust) at once.
Fortunately, however, pandas already has a method that can apply functions element-wise to multiple columns at once - 
the DataFrame.applymap() method.

def label(element):
    if element > 1:
        return 'High'
    else:
        return 'Low'
economy_apply = happiness2015['Economy'].apply(label)
factors = ['Economy', 'Family', 'Health', 'Freedom', 'Trust', 'Generosity']

factors_impact = happiness2015[factors].applymap(label)

5. 
Let's use the df.apply() method to calculate the number of 'High' and 'Low' values in each column of the result 
from the last exercise, factors_impact. In order to do so, we'll apply the pd.value_counts function to all of the 
columns in the dataframe:
factors_impact.apply(pd.value_counts)

Create a function that calculates the percentage of 'High' and 'Low' values in each column.
Create a function named v_counts that accepts one parameter called col.
Use the Series.value_counts() method to calculate the value counts for col. Assign the result to num.
Use the Series.size attribute to calculate the number of rows in the column. Assign the result to den.
Divide num by den and return the result.
Use the df.apply() method to apply the v_counts function to all of the columns in factors_impact.
Assign the result to v_counts_pct.
def v_counts(col):
    num = col.value_counts()
    den =  col.size
    return num/den
v_counts_pct = factors_impact.apply(v_counts)

	Economy	Family	Health	Freedom	Trust	Generosity
High	0.417722	0.563291	0.012658	NaN	NaN	NaN
Low	0.582278	0.436709	0.987342	1.0	1.0	1.0

6.
In general, we should only use the apply() method when a vectorized function does not exist. 
Recall that pandas uses vectorization,
the process of applying operations to whole series at once, to optimize performance.

In general, we should only use the apply() method when a vectorized function does not exist.
Recall that pandas uses vectorization, 
the process of applying operations to whole series at once, to optimize performance.
#Calculate the sum of the factor columns in each row.
happiness2015['Factors Sum'] = happiness2015[['Economy', 
'Family', 'Health', 'Freedom', 'Trust', 'Generosity', 'Dystopia Residual']].sum(axis=1)
#Display the first five rows of the result and the Happiness Score column.
happiness2015[['Happiness Score', 'Factors Sum']].head()


Create a function that converts each of the six factor columns and the Dystopia Residual column to percentages.
Create a function named percentages that accepts one parameter called col.
Divide col by the Happiness Score column. Assign the result to div.
Multiply div by 100 and return the result.
Use the df.apply() method to apply the percentages function to all of the columns in factors.
Assign the result to factor_percentages.

def percentages(col):
    div = col/happiness2015['Happiness Score'] 
    return div * 100
factor_percentages = happiness2015[factors].apply(percentages)

7. 
However, it would be easier to convert these numbers into percentages, plot the results,
and perform other data analysis tasks if we first reshaped the dataframe so that one column
holds the values for all six factors and the Dystopia Residual column. We can accomplish this 
with the pd.melt() function.
To demonstrate this function, let's just work with a subset of happiness2015 called happy_two.
Below, we use the melt function to reshape happy_two so that the values for Economy, Family, and Health reside in the 
same column:

pd.melt(happy_two, id_vars=['Country'], value_vars=['Economy', 'Family', 'Health'])

pd.melt(df,id_vars=[col1,col2],value_vars[col3,col4])

Use the melt function to reshape happiness2015. The columns listed in main_cols should stay the same. The columns listed in factors should be transformed into rows. Assign the result to a variable called melt.
Convert the value column to a percentage.
Divide the value column by the Happiness Score column and multiply the result by 100.
Use the round() function to round the result to 2 decimal places.
Assign the result to a new column called Percentage.

main_cols = ['Country', 'Region', 'Happiness Rank', 'Happiness Score']
factors = ['Economy', 'Family', 'Health', 'Freedom', 'Trust', 'Generosity', 'Dystopia Residual']


melt = pd.melt(happiness2015, id_vars= main_cols, value_vars = factors)
 
melt['Percentage'] = round(melt['value']/melt['Happiness Score'] * 100, 2)

tidy format = https://www.jstatsoft.org/article/view/v059i10

Use the df.pivot_table() method to create a pivot table from the melt dataframe. Set the variable column as the index 
and the value column as the values. Assign the result to pv_melt.
Use the df.plot() method to create a pie chart of the results. Set the kind parameter to 'pie', the y parameter to 'value', 
and the legend parameter to False, so we can better see the results.
If we disregard Dystopia Residual, which two factors, on average, contribute the most to the happiness score?

melt = pd.melt(happiness2015, id_vars = ['Country', 'Region', 'Happiness Rank', 'Happiness Score'], value_vars= ['Economy',
'Family', 'Health', 'Freedom', 'Trust', 'Generosity', 'Dystopia Residual'])
melt['Percentage'] = round(melt['value']/melt['Happiness Score'] * 100, 2)

pv_melt = melt.pivot_table(index = 'variable',values = 'value')
pv_melt.plot(kind='pie', y='value', legend=False)

In this mission, we learned how to transform data using the Series.map(), Series.apply(), DataFrame.apply(), 
and DataFrame.applymap() methods along with the pd.melt() function. Below is a summary chart of the differences 
between the map(), apply(), and applymap() methods:

Method
Series or Dataframe Method	Applies Functions Element-wise?
Map	Series	Yes
Apply	Series	Yes
Applymap	Dataframe	Yes
Apply	Dataframe	No, applies functions along an axis
As you explore pandas, you'll also find that pandas has a method to "un-melt" the data, or transform rows into columns. 
This method is called the df.pivot() method, not to be confused with the df.pivot_table() method used to aggregate data. 
Alhtough we couldn't cover the df.pivot() method explicitly in this mission, we encourage you to explore it on your own.

In the next mission, we'll learn how to manipulate strings in pandas as we continue building on what we've learned so far.


    


