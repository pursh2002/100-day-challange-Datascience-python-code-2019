Objective 
In this challenge, we practice calculating the mean, median, and mode. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given an array, , of  integers, calculate and print the respective mean, median, and mode on separate lines. If your array contains more than one modal value, choose the numerically smallest one.
Note: Other than the modal value (which will always be an integer), your answers should be in decimal form, rounded to a scale of  decimal place (i.e., ,  format).
Input Format
The first line contains an integer, , denoting the number of elements in the array. 
The second line contains  space-separated integers describing the array's elements.
Constraints

, where  is the  element of the array.
Output Format
Print  lines of output in the following order:
Print the mean on a new line, to a scale of  decimal place (i.e., , ).
Print the median on a new line, to a scale of  decimal place (i.e., , ).
Print the mode on a new line; if more than one such value exists, print the numerically smallest one.
Sample Input
10
64630 11735 14216 99233 14470 4978 73429 38120 51135 67060
Sample Output
43900.6
44627.5
4978
Explanation
Mean: 
We sum all  elements in the array, divide the sum by , and print our result on a new line.

Median: 
To calculate the median, we need the elements of the array to be sorted in either non-increasing or non-decreasing order. The sorted array . We then average the two middle elements:

and print our result on a new line.
Mode: 
We can find the number of occurrences of all the elements in the array:
 4978 : 1
11735 : 1
14216 : 1
14470 : 1
38120 : 1
51135 : 1
64630 : 1
67060 : 1
73429 : 1
99233 : 1
Every number occurs once, making  the maximum number of occurrences for any number in . Because we have multiple values to choose from, we want to select the smallest one, , and print it on a new line.


# example

# You can use a loop to create a list
squares = []

for x in range(10):
    squares.append(x**2)
 
print squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# Or you can use list comprehensions to get the same result:
squares = [x**2 for x in range(10)]

print squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
--------
from collections import Counter

n = int(input())
data = sorted([int(i) for i in input().split()])

Mean = sum(data)/n
Median = (data[n // 2] + data[-(n//2 + 1)]) / 2
Mode = sorted(sorted(Counter(data).items()), key = lambda x: x[1], reverse = True)[0][0]

print(Mean, Median, Mode, sep = '\n')

----
good code

import numpy as np
from scipy import stats

size = int(input())
numbers = list(map(int, input().split()))
print(np.mean(numbers))
print(np.median(numbers))
print(int(stats.mode(numbers)[0]))


2. 
Objective 
In the previous challenge, we calculated a mean. In this challenge, we practice calculating a weighted mean. 
Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given an array, , of  integers and an array, , representing the respective weights of 's elements, calculate and 
print the weighted mean of 's elements. Your answer should be rounded to a scale of  decimal place (i.e., format).
Input Format
The first line contains an integer, , denoting the number of elements in arrays  and . 
The second line contains  space-separated integers describing the respective elements of array . 
The third line contains  space-separated integers describing the respective elements of array .
Constraints

, where  is the  element of array .
, where  is the  element of array .
Output Format
Print the weighted mean on a new line. Your answer should be rounded to a scale of  decimal place (i.e.,  format).
Sample Input
5
10 40 30 50 20
1 2 3 4 5
Sample Output
32.0
Explanation
We use the following formula to calculate the weighted mean:

And then print our result to a scale of  decimal place () on a new line.

input()
X = map(float,raw_input().split())
W = map(float,raw_input().split())
print round(sum([i[0]*i[1] for i in zip(X,W)])/sum(W),1)
------

N = map(int,input().split())
X = list(map(int, input().strip().split(' ')))
W = list(map(int, input().strip().split(' ')))
sum_X = sum([a*b for a,b in zip(X,W)])
print(round((sum_X/sum(W)),1))

----
N = int(input()) x = list(map(int, input().split())) w = list(map(int, input().split()))
print('{:.1f}'.format(sum([xi * wi for xi, wi in zip(x, w)]) / sum(w)))

----
import operator
input()
n = list(map(int,input().split()))
w = list(map(int,input().split()))
print("{0:.1f}".format(sum(map(operator.mul,n,w))/sum(w)))
---

int(input())
numbers = list(map(int, input().split(" ")))
weight = list(map(int, input().split(" ")))

print("%.1f" % (sum(list(map(lambda x : x[0] * x[1], zip(numbers, weight)))) / sum(weight)))
