import statistics 
  # for sample variance 
# Creating a sample of data 
sample = [2.74, 1.23, 2.63, 2.22, 3, 1.98] 
  
# Prints variance of the sample set 
  
# Function will automatically calulate 
# it's mean and set it as xbar 
print("Variance of sample set is % s" 
      %(statistics.variance(sample))) 
      
# population variance 
statistics.pvaraiance 
......
from statistics import variance
# data = [-14.82381293, -0.29423447, -13.56067979, -1.6288903, -0.31632439, 0.53459687, -1.34069996, -1.61042692, -4.03220519, -0.24332097]
variance(data)
# 32.024849178421285
......
import numpy as np

results = [-14.82381293, -0.29423447, -13.56067979, -1.6288903, -0.31632439,
          0.53459687, -1.34069996, -1.61042692, -4.03220519, -0.24332097]

print(np.var(results))
........
import numpy as np
def get_variance(xs):
    mean = np.mean(xs)
    summed = 0
    for x in xs:
        summed += (x - mean)**2
    return summed / (len(xs) - 1)
print(get_variance([1,2,3,4,5]))
------

Objective 
In this challenge, we practice calculating the mean, median, and mode. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given an array, , of  integers, calculate and print the respective mean, median, and mode on separate lines. If your array contains more than one modal value, choose the numerically smallest one.
Note: Other than the modal value (which will always be an integer), your answers should be in decimal form, rounded to a scale of  decimal place (i.e., ,  format).
Input Format
The first line contains an integer, , denoting the number of elements in the array. 
The second line contains  space-separated integers describing the array's elements.
Constraints

, where  is the  element of the array.
Output Format
Print  lines of output in the following order:
Print the mean on a new line, to a scale of  decimal place (i.e., , ).
Print the median on a new line, to a scale of  decimal place (i.e., , ).
Print the mode on a new line; if more than one such value exists, print the numerically smallest one.
Sample Input
10
64630 11735 14216 99233 14470 4978 73429 38120 51135 67060
Sample Output
43900.6
44627.5
4978
Explanation
Mean: 
We sum all  elements in the array, divide the sum by , and print our result on a new line.

Median: 
To calculate the median, we need the elements of the array to be sorted in either non-increasing or non-decreasing order. The sorted array . We then average the two middle elements:

and print our result on a new line.
Mode: 
We can find the number of occurrences of all the elements in the array:
 4978 : 1
11735 : 1
14216 : 1
14470 : 1
38120 : 1
51135 : 1
64630 : 1
67060 : 1
73429 : 1
99233 : 1
Every number occurs once, making  the maximum number of occurrences for any number in . Because we have multiple values to choose from, we want to select the smallest one, , and print it on a new line.


# example

# You can use a loop to create a list
squares = []

for x in range(10):
    squares.append(x**2)
 
print squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# Or you can use list comprehensions to get the same result:
squares = [x**2 for x in range(10)]

print squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
--------
from collections import Counter

n = int(input())
data = sorted([int(i) for i in input().split()])

Mean = sum(data)/n
Median = (data[n // 2] + data[-(n//2 + 1)]) / 2
Mode = sorted(sorted(Counter(data).items()), key = lambda x: x[1], reverse = True)[0][0]

print(Mean, Median, Mode, sep = '\n')

----
good code

import numpy as np
from scipy import stats

size = int(input())
numbers = list(map(int, input().split()))
print(np.mean(numbers))
print(np.median(numbers))
print(int(stats.mode(numbers)[0]))


2. 
Objective 
In the previous challenge, we calculated a mean. In this challenge, we practice calculating a weighted mean. 
Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given an array, , of  integers and an array, , representing the respective weights of 's elements, calculate and 
print the weighted mean of 's elements. Your answer should be rounded to a scale of  decimal place (i.e., format).
Input Format
The first line contains an integer, , denoting the number of elements in arrays  and . 
The second line contains  space-separated integers describing the respective elements of array . 
The third line contains  space-separated integers describing the respective elements of array .
Constraints

, where  is the  element of array .
, where  is the  element of array .
Output Format
Print the weighted mean on a new line. Your answer should be rounded to a scale of  decimal place (i.e.,  format).
Sample Input
5
10 40 30 50 20
1 2 3 4 5
Sample Output
32.0
Explanation
We use the following formula to calculate the weighted mean:

And then print our result to a scale of  decimal place () on a new line.

input()
X = map(float,raw_input().split())
W = map(float,raw_input().split())
print round(sum([i[0]*i[1] for i in zip(X,W)])/sum(W),1)
------

N = map(int,input().split())
X = list(map(int, input().strip().split(' ')))
W = list(map(int, input().strip().split(' ')))
sum_X = sum([a*b for a,b in zip(X,W)])
print(round((sum_X/sum(W)),1))

----
N = int(input()) x = list(map(int, input().split())) w = list(map(int, input().split()))
print('{:.1f}'.format(sum([xi * wi for xi, wi in zip(x, w)]) / sum(w)))

----
import operator
input()
n = list(map(int,input().split()))
w = list(map(int,input().split()))
print("{0:.1f}".format(sum(map(operator.mul,n,w))/sum(w)))
---

int(input())
numbers = list(map(int, input().split(" ")))
weight = list(map(int, input().split(" ")))

print("%.1f" % (sum(list(map(lambda x : x[0] * x[1], zip(numbers, weight)))) / sum(weight)))



------
3.

n = int(input().strip())
X = [int(x) for x in input().strip().split()]

mean = sum(X) / n
variance = sum([((x - mean) ** 2) for x in X]) / n
stddev = variance ** 0.5

print("{0:0.1f}".format(stddev))

n = int(input())
nums = [int(x) for x in input().strip().split()]
print(round((sum([(x-(sum(nums) / n))**2 for x in nums])/n)**.5, 1))

n = int(input())
X = list(map(int, input().split()))
mean = sum(X)/n
variance = sum(list(map(lambda x: (x-mean)**2, X))) / n
print("%.1f" % (variance**0.5))

----
import math

N = int(input())
X = list(map(int, input().split()))

mean = sum(X)/N
variance = sum([((x - mean) ** 2) for x in X]) / N
print("{0:.1f}".format(math.sqrt(variance)))

----
import statistics as stats

N = int(input())
X = list(map(int, input().split()))

print("{0:.1f}".format(stats.pstdev(X)))

----
import numpy as np

N = int(input())
X = list(map(int, input().split())) # or X = np.array(input().split(), int)

print("{0:.1f}".format(np.std(X)))

----
from statistics import pstdev
n,a=input(),list(map(int,input().split()))
print(round(pstdev(a),1))
---
>>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
0.986893273527251
--
>>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
1.0810874155219827
---
import statistics as st

n = int(input())
data = list(map(int, input().split()))
print(round(st.pstdev(data), 1))

4.
statistics import median 
n=int(input()) 
x=list(map(int,input().split())) 
x.sort()
q2=median(x) 
print(int(median([i for i in x if iq2])))

----
from statistics import median
n=int(input())
arr=sorted(map(int,input().split()))

print(int(median(arr[:n//2])))
print(int(median(arr)))
print(int(median(arr[(n+1)//2:])))
------
N = int(input())

data = sorted([int(i) for i in input().split()])

median = lambda d : (d[len(d) // 2] + d[-(len(d) // 2 + 1)]) * 0.5

mid = N // 2

Q1 = int(median(data[:mid]))
Q2 = int(median(data))
Q3 = int(median(data[-mid:]))

print(Q1, Q2, Q3, sep='\n')
-----
import statistics as s

n = input()

num = sorted(list(map(int, str.rsplit(input(), " "))))
midpoint = int(n)//2

print(int(s.median(num[:midpoint])))
print(int(s.median(num)))
print(int(s.median(num[-midpoint:])))


5. Day 1: Interquartile Range
Objective 
In this challenge, we practice calculating the interquartile range. We recommend you complete the Quartiles challenge before attempting this problem.
Task 
The interquartile range of an array is the difference between its first () and third () quartiles (i.e., ).
Given an array, , of  integers and an array, , representing the respective frequencies of 's elements, construct a data set, , where each  occurs at frequency . Then calculate and print 's interquartile range, rounded to a scale of  decimal place (i.e.,  format).
Tip: Be careful to not use integer division when averaging the middle two elements for a data set with an even number of elements, and be sure to not include the median in your upper and lower data sets.
Input Format
The first line contains an integer, , denoting the number of elements in arrays  and . 
The second line contains  space-separated integers describing the respective elements of array . 
The third line contains  space-separated integers describing the respective elements of array .
Constraints

, where  is the  element of array .
, where  is the  element of array .
The number of elements in  is equal to .
Output Format
Print the interquartile range for the expanded data set on a new line. Round your answer to a scale of  decimal place (i.e.,  format).
Sample Input
6
6 12 8 10 20 16
5 4 3 2 1 5
Sample Output
9.0
Explanation
The given data is:
InterquartileRange
First, we create data set  containing the data from set  at the respective frequencies specified by : 

As there are an even number of data points in the original ordered data set, we will split this data set exactly in half:
Lower half (L): 6, 6, 6, 6, 6, 8, 8, 8, 10, 10
Upper half (U): 12, 12, 12, 12, 16, 16, 16, 16, 16, 20
Next, we find . There are  elements in  half, so  is the average of the middle two elements:  and . Thus, .
Next, we find .There are  elements in  half, so  is the average of the middle two elements:  and . Thus, .
From this, we calculate the interquartile range as  and print  as our answer.

import statistics as st

n = int(input())
data = list(map(int, input().split()))
freq = list(map(int, input().split()))

s = []
for i in range(n):
    s += [data[i]] * freq[i]
N = sum(freq)
s.sort()

if n%2 != 0:
    q1 = st.median(s[:N//2])
    q3 = st.median(s[N//2+1:])
else:
    q1 = st.median(s[:N//2])
    q3 = st.median(s[N//2:])

ir = round(float(q3-q1), 1)
print(ir)
----
from itertools import accumulate
def getByIndex(X, F, ind):
    for i,x in enumerate(accumulate(F)):
        if x >= ind+1: return X[i]

-----
X, F = [list(map(int, input().split())) for _ in range(2)]
X, F = zip(*sorted(zip(X, F)))
----
from itertools import accumulate
def getByIndex(X, F, ind):
    for i,x in enumerate(accumulate(F)):
        if x >= ind+1: return X[i]
        
----
import statistics as st
n = int(input())
X = [int(i) for i in input().split()]
F = [int(i) for i in input().split()]

S= []
for i in range(n):
    S.extend([X[i]]*F[i])

S = sorted(S)


n = len(S)
n2 = int(n/2)
print(round(float(st.median(S[-n2:])-st.median(S[:n2])),1))
