Day 1: Data Types

Objective 
Today, we're discussing data types. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Complete the code in the editor below. The variables , , and  are already declared and initialized for you. You must:
Declare  variables: one of type int, one of type double, and one of type String.
Read  lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your  variables.
Use the  operator to perform the following operations: 
Print the sum of  plus your int variable on a new line.
Print the sum of  plus your double variable to a scale of one decimal place on a new line.
Concatenate  with the string you read as input and print the result on a new line.
Note: If you are using a language that doesn't support using  for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input.
Input Format
The first line contains an integer that you must sum with . 
The second line contains a double that you must sum with . 
The third line contains a string that you must concatenate with .
Output Format
Print the sum of both integers on the first line, the sum of both doubles (scaled to  decimal place) on the second line, and then the two concatenated strings on the third line.
Sample Input
12
4.0
is the best place to learn and practice coding!
Sample Output
16
8.0
HackerRank is the best place to learn and practice coding!
Explanation
When we sum the integers  and , we get the integer . 
When we sum the floating-point numbers  and , we get . 
When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!.
You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin.

i = 4
d = 4.0
s = 'HackerRank '
# Declare second integer, double, and String variables.
a = 0
b = 0.0
c = ""
# Read and save an integer, double, and String to your variables.
a = int(input())
b = float(input())
c = str(input())
# Print the sum of both integer variables on a new line.
print(i+a)
# Print the sum of the double variables on a new line.
print(d+b)
# Concatenate and print the String variables on a new line
print(s+c)
# The 's' variable above should be printed first.


Day 2: Operators
Objective 
In this challenge, you'll work with arithmetic operators. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given the meal price (base cost of a meal), tip percent (the percentage of the meal price being added as tip), and tax percent (the percentage of the meal price being added as tax) for a meal, find and print the meal's total cost.
Note: Be sure to use precise values for your calculations, or you may end up with an incorrectly rounded result!
Input Format
There are  lines of numeric input: 
The first line has a double,  (the cost of the meal before tax and tip). 
The second line has an integer,  (the percentage of  being added as tip). 
The third line has an integer,  (the percentage of  being added as tax).
Output Format
Print the total meal cost, where  is the rounded integer result of the entire bill ( with added tax and tip).
Sample Input
12.00
20
8
Sample Output
15
Explanation
Given: 
, , 
Calculations: 

We round  to the nearest dollar (integer) and then print our result, .

def solve(meal_cost, tip_percent, tax_percent):
    
    tip = (meal_cost * tip_percent)/100
    tax = (meal_cost * tax_percent)/100
    totalCost = int(round(meal_cost + tip + tax))
    print(totalCost)
meal_cost = 12.00
tip_percent = 20
tax_percent = 8

if __name__ == '__main__':
    solve(meal_cost,tip_percent,tax_percent)
    
Day 3: Intro to Conditional Statements

n = int(input())
def compute():
    if (n % 2) == 1:
        print('Weird')
    elif(n%2) == 0 and 2<=n<5:
        print("Not Weird")
    elif(n%2) == 0 and 6<=n < 20:
        print("Weird")
    else:
        (n%2)==0 and n > 20
        print('Not Weird')
        
if __name__ == '__main__':       
    compute()    

Day 4: Class vs. Instance

Objective 
In this challenge, we're going to learn about the difference between a class and an instance; because this is an Object Oriented concept, it's only enabled in certain languages. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Write a Person class with an instance variable, , and a constructor that takes an integer, , as a parameter. The constructor must assign  to  after confirming the argument passed as  is not negative; if a negative argument is passed as , the constructor should set  to  and print Age is not valid, setting age to 0.. In addition, you must write the following instance methods:
yearPasses() should increase the  instance variable by .
amIOld() should perform the following conditional actions:
If , print You are young..
If  and , print You are a teenager..
Otherwise, print You are old..
To help you learn by example and complete this challenge, much of the code is provided for you, but you'll be writing everything in the future. The code that creates each instance of your Person class is in the main method. Don't worry if you don't understand it all quite yet!
Note: Do not remove or alter the stub code in the editor.
Input Format
Input is handled for you by the stub code in the editor.
The first line contains an integer,  (the number of test cases), and the  subsequent lines each contain an integer denoting the  of a Person instance.
Constraints


Output Format
Complete the method definitions provided in the editor so they meet the specifications outlined above; the code to test your work is already in the editor. If your methods are implemented correctly, each test case will print  or  lines (depending on whether or not a valid  was passed to the constructor).
Sample Input
4
-1
10
16
18
Sample Output
Age is not valid, setting age to 0.
You are young.
You are young.

You are young.
You are a teenager.

You are a teenager.
You are old.

You are old.
You are old.
Explanation
Test Case 0:  
Because , our code must set  to  and print the "Age is not valid..." message followed by the young message. 
Three years pass and , so we print the young message again.
Test Case 1:  
Because , our code should print that the person is young. Three years pass and , so we print that the person is 
now a teenager.
Test Case 2:  
Because , our code should print that the person is a teenager. Three years pass and , so we print that the person is old.
Test Case 3:  
Because , our code should print that the person is old. Three years pass and the person is still old at , so we print 
the old message again.
The extra line at the end of the output is supposed to be there and is trimmed before being compared against the 
test case's expected output. 
If you're failing this challenge, check your logic and review your print statements for spelling errors.
class Person:
    def __init__(self,initialAge ):
        self.age = initialAge
    
    def amIOld(self):
        if self.age < 13:
            if self.age < 0:
                self.age = 0
                print("Age is not valid, setting age to 0. ")
            print("You are young")
        elif 13 < self.age < 18:
            print("Your are a teenager")
        else:
            print("Yoe are too old")
    def yearPasses(self):
        self.age += 1
        


t = int(input())
for i in range(0, t):
    age = int(input())         
    p = Person(age)  
    p.amIOld()
    for j in range(0, 3):
        p.yearPasses()       
    p.amIOld()
    print("")
    
Day 5: Loops

Objective 
In this challenge, we're going to use loops to help us do some simple math. Check out the Tutorial tab to learn more.
Task 
Given an integer, , print its first  multiples. Each multiple  (where ) should be printed on a new line in the form: n x i = result.
Input Format
A single integer, .
Constraints

Output Format
Print  lines of output; each line  (where ) contains the  of  in the form: 
n x i = result.
Sample Input
2
Sample Output
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18
2 x 10 = 20


def compute():
    for i in range(1,11):
        print("{} x {} = {}".format(n, i, (n*i)))
    
    
if __name__ == '__main__':
    n = int(input())
    compute()
    
Day 6: Let's Review

Objective 
Today we're expanding our knowledge of Strings and combining it with what we've already learned about loops. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given a string, , of length  that is indexed from  to , print its even-indexed and odd-indexed characters as space-separated strings on a single line (see the Sample below for more detail).
Note:  is considered to be an even index.
Input Format
The first line contains an integer,  (the number of test cases). 
Each line  of the  subsequent lines contain a String, .
Constraints


Output Format
For each String  (where ), print 's even-indexed characters, followed by a space, followed by 's odd-indexed characters.
Sample Input
2
Hacker
Rank
Sample Output
Hce akr
Rn ak
Explanation
Test Case 0:  
 
 
 
 
 
 
The even indices are , , and , and the odd indices are , , and . We then print a single line of  space-separated strings; the first string contains the ordered characters from 's even indices (), and the second string contains the ordered characters from 's odd indices ().
Test Case 1:  
 
 
 
 
The even indices are  and , and the odd indices are  and . We then print a single line of  space-separated strings; the first string contains the ordered characters from 's even indices (), and the second string contains the ordered characters from 's odd indices ().

im new to python so can you explain me why you are using s[::2] and s[1::2]. And what do these do?
RazyDave: The colon, inside an array index, can set up to 3 numbers/parameters:
The first one is the "from" number (included), the second is the "to" number (excluded), and the third is the "pace".
a[::2] will retrieve all array items (since it does not set up any from or to, and set the "pace"), starting from index 0, incrementing the index two by two and accessing all even indexes (0,2,4,6, and so on).
s[1::2] will retrieve all array items, from index 1, incrementing the index two by two and accessing all odd indexes (1,3,5,7,9, and so on).

for i in range(int(input())): s=input(); print(*["".join(s[::2]),"".join(s[1::2])])

for N in range(int(input())):

    S = input()
    print(S[::2], S[1::2])
    
    explain the '*' mark?
    
    It unpacks container data types like lists, sets, etc. and prints every member at once in order, with whatever separator you set.
https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.indexing.html



Day 7: Arrays


Objective 
Today, we're learning about the Array data structure. Check out the Tutorial tab for learning materials and an instructional video!
Task 
Given an array, , of  integers, print 's elements in reverse order as a single line of space-separated numbers.
Input Format
The first line contains an integer,  (the size of our array). 
The second line contains  space-separated integers describing array 's elements.
Constraints

, where  is the  integer in the array.
Output Format
Print the elements of array  in reverse order as a single line of space-separated numbers.
Sample Input
4
1 4 3 2
Sample Output
2 3 4 1

the 'reverse' algorithm modifies the elements of arr. In the task: "print 's elements in reverse order". You can use the other algorithm std::copy(arr.rbegin(), arr.rend(), std::ostream_iterator(std::cout, " ")); It's also one line solution.
j='' 
for i in reversed(arr): 
    j=j+' '+str(i)
print(j[1:])


print(' '.join(map(str, reversed(arr))))

